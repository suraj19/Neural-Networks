# -*- coding: utf-8 -*-
"""ANN_For_Bank_Data_Using_Theano.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FQj0Q4UZE31VNZPOQIBq542DItE3B7Ed
"""

from google.colab import files
import os
import pandas as pd
#auth.authenticate_user()
#gauth = GoogleAuth()
#gauth.credentials = GoogleCredentials.get_application_default()
#drive = GoogleDrive(gauth)
uploaded = files.upload()

import io
dataset = pd.read_csv(io.BytesIO(uploaded['Bank_Data.csv']))
#dataset=pd.read_csv("Bank_data.csv")
X = dataset.iloc[:,3:13].values
y = dataset.iloc[:,13].values
#dataset.head(3)
X

from sklearn.preprocessing import LabelEncoder,OneHotEncoder
labelencoder_X_1=LabelEncoder()
X[:,1]=labelencoder_X_1.fit_transform(X[:,1])
labelencoder_X_2 =LabelEncoder()
X[:,2]=labelencoder_X_2.fit_transform(X[:,2])
X

onehotencoder = OneHotEncoder(categorical_features=[1])
X=onehotencoder.fit_transform(X).toarray()
X

X= X[:,1:]#To avoid the dummy variable Trap
X

#splitting the data set
from sklearn.model_selection import KFold
from sklearn import model_selection
kfold=KFold(n_splits=4, random_state=None, shuffle=False)
#kf.get_n_splits(X)
for train, test in kfold.split(X):
  X_train, X_test = X[train], X[test]
  y_train, y_test = y[train], y[test]
  #print(X_train, X_test, y_train,y_test)
  #X_train,X_test,y_train,y_test =train_test_split(X,y,test_size=0.2,random_state=0)
  from sklearn.preprocessing import StandardScaler
  sc =StandardScaler()
  X_train=sc.fit_transform(X_train)
  X_test = sc.transform(X_test)
  print(X_train)
  os.environ["KERAS_BACKEND"] = "theano"
  import keras; import keras.backend
  import keras
  from keras.models import Sequential
  from keras.layers import Dense
  from keras import metrics
  from keras import models
  classifier = Sequential()
  #Adding the input layer and the first hidden layer
  classifier.add(Dense(output_dim =6,init='uniform',activation ='relu',input_dim=11))
  #adding the second hidden layer
  classifier.add(Dense(output_dim =6,init='uniform',activation ='relu'))
  classifier.add(Dense(output_dim =1,init='uniform',activation ='sigmoid'))
  classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
  classifier.fit(X_train,y_train,batch_size=10,nb_epoch=100)
  
  y_pred =classifier.predict(X_test)
  y_pred = (y_pred>0.5)
  #accuracy=model.compile(loss='mean_squared_error',optimizer='sgd',metrics=['mae', 'acc'])
  #print(accuracy)
  from sklearn.metrics import confusion_matrix
  cm = confusion_matrix(y_test,y_pred)
  print(cm)
  TP = cm[1,1]
  FP = cm[0,1]
  FN = cm[1,0]
  TN = cm[0,0]
  Total=TP+TN+FN+FP
  Accuracy=(TP+TN)/Total
  print("The Accuracy of Model: ",(Accuracy*100))
  print("==========================================================================================")
  print("==========================================================================================")
  Average_Accuracy=[]
  Average_Accuracy.append(Accuracy)
#print("Avarage_Accuracy: ",)
Average=sum(Average_Accuracy)/len(Average_Accuracy) 
print("The Total Accuracy of the Model: ",Average*100)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc =StandardScaler()
X_train=sc.fit_transform(X_train)
X_test = sc.transform(X_test)
X_train

#With Theano as Background
#import os
os.environ["KERAS_BACKEND"] = "theano"
import keras; import keras.backend

import keras
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import StratifiedKFold
classifier = Sequential()
#Adding the input layer and the first hidden layer
classifier.add(Dense(output_dim =6,init='uniform',activation ='relu',input_dim=11))
#adding the second hidden layer
classifier.add(Dense(output_dim =6,init='uniform',activation ='relu'))

classifier.add(Dense(output_dim =1,init='uniform',activation ='sigmoid'))

classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

classifier.fit(X_train,y_train,batch_size=10,nb_epoch=100)

#Making the predictions and evaluating the model
#predicting the test reults
y_pred =classifier.predict(X_test)
y_pred = (y_pred>0.5)
y_pred

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)
cm

TP = cm[1,1]
FP = cm[0,1]
FN = cm[1,0]
TN = cm[0,0]
Total=TP+TN+FN+FP

Accuracy=(TP+TN)/Total
Accuracy*100

